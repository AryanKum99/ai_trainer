// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                 @id @default(autoincrement())
  name               String
  username           String?             @unique
  password           String?
  email              String              @unique
  image              String?    @db.Text
  age                Int?
  height             Float?
  weight             Float?
  dob                DateTime?
  bmi                Float?
  gender             String?
  emailVerified      Boolean?            @default(false)
  goal               Goal[]
  progress           Progress[]
  workoutPlan        WorkoutPlan[]
  feedback           Feedback[]
  achievement        Achievement[]
  Sessions           Session[]
  Accounts           Account[]
  VerificationTokens VerificationToken[]

}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Account {
  id                       Int     @id @default(autoincrement())
  userId                   Int
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Goal {
  id         Int    @id @default(autoincrement())
  userId     Int
  goalWeight Float
  goal       String
  goalBmi    Float
  user       User   @relation(fields: [userId], references: [id])
}

model Exercise {
  id                   Int       @id @default(autoincrement())
  name                 String
  bodyJointCoordinates String
  targetBodyPart       String
  difficulty           String
  reps                 Int
  workouts             Workout[]
  equipmentId          Int
  equipment            Equipment @relation(fields: [equipmentId], references: [id])
}

model Workout {
  id              Int         @id @default(autoincrement())
  exerciseId      Int
  workoutDuration Int
  difficultyLevel String
  exercise        Exercise    @relation(fields: [exerciseId], references: [id])
  workoutPlanId   Int
  workoutPlan     WorkoutPlan @relation(fields: [workoutPlanId], references: [id])
}

model Admin {
  id       Int    @id @default(autoincrement())
  login    String @unique
  password String
}

model Nutrition {
  id       Int    @id @default(autoincrement())
  calories Int
  dietType String
  food     String
  protein  Float
  fat      Float
  carbs    Float
  vitamins String
  minerals String
  meal     Meal[]
}

model Progress {
  id               Int   @id @default(autoincrement())
  userId           Int
  avgSleep         Float
  workoutDuration  Int
  caloriesBurnt    Int
  weight           Float
  accuracyExercise Float
  user             User  @relation(fields: [userId], references: [id])
}

model Meal {
  id          Int       @id @default(autoincrement())
  name        String
  calories    Int
  dietType    String
  ingredients String
  nutritionId Int
  nutrition   Nutrition @relation(fields: [nutritionId], references: [id])
}

model WorkoutPlan {
  id       Int       @id @default(autoincrement())
  name     String
  userId   Int
  user     User      @relation(fields: [userId], references: [id])
  workouts Workout[]
}

model Feedback {
  id      Int    @id @default(autoincrement())
  userId  Int
  content String
  rating  Int
  user    User   @relation(fields: [userId], references: [id])
}

model Equipment {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  exercises   Exercise[]
}

model Achievement {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  userId      Int
  user        User   @relation(fields: [userId], references: [id])
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
